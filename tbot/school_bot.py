import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Data for the bot
news = [
    "1. –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É: 1 –≤–µ—Ä–µ—Å–Ω—è.",
    "2. –î–µ–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π: 15 –≤–µ—Ä–µ—Å–Ω—è.",
    "3. –û—Å—ñ–Ω–Ω—ñ –∫–∞–Ω—ñ–∫—É–ª–∏: –∑ 23 –∂–æ–≤—Ç–Ω—è –ø–æ 29 –∂–æ–≤—Ç–Ω—è."
]

schedule = {
    "5 –∫–ª–∞—Å": "1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n2. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞\n3. –Ü—Å—Ç–æ—Ä—ñ—è\n4. –§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞\n5. –ü—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤—Å—Ç–≤–æ",
    "6 –∫–ª–∞—Å": "1. –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞\n2. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n3. –ë—ñ–æ–ª–æ–≥—ñ—è\n4. –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è\n5. –§—ñ–∑–∏–∫–∞",
    "7 –∫–ª–∞—Å": "1. –ê–ª–≥–µ–±—Ä–∞\n2. –•—ñ–º—ñ—è\n3. –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞\n4. –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è\n5. –§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞",
    "8 –∫–ª–∞—Å": "1. –ì–µ–æ–º–µ—Ç—Ä—ñ—è\n2. –Ü—Å—Ç–æ—Ä—ñ—è\n3. –§—ñ–∑–∏–∫–∞\n4. –•—ñ–º—ñ—è\n5. –ë—ñ–æ–ª–æ–≥—ñ—è",
    "9 –∫–ª–∞—Å": "1. –ê–ª–≥–µ–±—Ä–∞\n2. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞\n3. –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞\n4. –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞\n5. –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "10 –∫–ª–∞—Å": "1. –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞\n2. –§—ñ–∑–∏–∫–∞\n3. –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è\n4. –•—ñ–º—ñ—è\n5. –ë—ñ–æ–ª–æ–≥—ñ—è",
    "11 –∫–ª–∞—Å": "1. –Ü—Å—Ç–æ—Ä—ñ—è\n2. –ì–µ–æ–º–µ—Ç—Ä—ñ—è\n3. –ê–ª–≥–µ–±—Ä–∞\n4. –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞\n5. –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞"
}

bells = (
    "1 —É—Ä–æ–∫: 08:00 - 08:45\n"
    "2 —É—Ä–æ–∫: 09:00 - 09:45\n"
    "3 —É—Ä–æ–∫: 10:00 - 10:45\n"
    "4 —É—Ä–æ–∫: 11:00 - 11:45\n"
    "5 —É—Ä–æ–∫: 12:00 - 12:45\n"
    "6 —É—Ä–æ–∫: 13:00 - 13:45\n"
    "7 —É—Ä–æ–∫: 14:00 - 14:45"
)

consultations = (
    "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫: –Ü—Å—Ç–æ—Ä—ñ—è - 15:00 (–≤—á–∏—Ç–µ–ª—å: –ü–µ—Ç—Ä–æ–≤ –û–ª–µ–≥)\n"
    "–í—ñ–≤—Ç–æ—Ä–æ–∫: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 16:00 (–≤—á–∏—Ç–µ–ª—å: –Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è)\n"
    "–°–µ—Ä–µ–¥–∞: –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ - 15:30 (–≤—á–∏—Ç–µ–ª—å: –°–º–∏—Ä–Ω–æ–≤–∞ –û–∫—Å–∞–Ω–∞)\n"
    "–ß–µ—Ç–≤–µ—Ä: –§—ñ–∑–∏–∫–∞ - 17:00 (–≤—á–∏—Ç–µ–ª—å: –ö–æ–≤–∞–ª—å –î–º–∏—Ç—Ä–æ)\n"
    "–ü'—è—Ç–Ω–∏—Ü—è: –ë—ñ–æ–ª–æ–≥—ñ—è - 16:00 (–≤—á–∏—Ç–µ–ª—å: –¢–∫–∞—á–µ–Ω–∫–æ –ì–∞–ª–∏–Ω–∞)"
)

# Start menu
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("üîî –ù–æ–≤–∏–Ω–∏", callback_data="news")],
            [InlineKeyboardButton("üìö –†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤", callback_data="schedule")],
            [InlineKeyboardButton("‚è∞ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤", callback_data="bells")],
            [InlineKeyboardButton("üë®‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤", callback_data="consultations")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∫—ñ–ª—å–Ω–∏–π –±–æ—Ç. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"Error in start function: {e}")
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# Handle buttons
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()
        data = query.data

        if data == "news":
            text = "üîî –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" + "\n".join(news)
        elif data == "schedule":
            buttons = [[InlineKeyboardButton(f"{key}", callback_data=f"class_{key}")] for key in schedule.keys()]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å:", reply_markup=reply_markup)
            return
        elif data.startswith("class_"):
            class_name = data.split("_")[1]
            if class_name in schedule:
                text = f"üìö –†–æ–∑–∫–ª–∞–¥ –¥–ª—è {class_name} –∫–ª–∞—Å—É:\n" + schedule[class_name]
            else:
                text = f"–†–æ–∑–∫–ª–∞–¥ –¥–ª—è {class_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        elif data == "bells":
            text = "‚è∞ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤:\n" + bells
        elif data == "consultations":
            text = "üë®‚Äçüè´ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n" + consultations
        else:
            text = "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞."

        await query.edit_message_text(text)
    except Exception as e:
        logging.error(f"Error handling button: {e}")
        if query:
            await query.edit_message_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# Main function
def main():
    try:
        token = ""
        application = ApplicationBuilder().token(token).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_buttons))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        application.run_polling()
    except Exception as e:
        logging.error(f"Main function error: {e}")

if __name__ == "__main__":
    main()